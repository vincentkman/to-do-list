{"version":3,"sources":["components/Input/Input.js","components/Task/Task.js","components/List/List.js","components/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["Input","props","className","onSubmit","submitHandler","type","placeholder","value","task","onChange","changeHandler","disabled","editTask","Task","subject","onClick","editHandler","removeHandler","List","tasks","map","key","id","refreshHandler","ToDoMain","e","setState","target","preventDefault","uuid","state","filter","find","this","React","Component","App","Main","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qZAgCeA,MA7Bf,SAAeC,GACX,OACI,yBAAKC,UAAU,SACX,0BAAMC,SAAUF,EAAMG,eAClB,2BACIC,KAAK,OACLC,YAAY,iBACZC,MAAON,EAAMO,KACbN,UAAU,YACVO,SAAUR,EAAMS,gBAEpB,6BACI,4BACIL,KAAK,SACLM,UAAUV,EAAMO,KAChBN,UACID,EAAMW,SACA,2BACA,2BAGTX,EAAMW,SAAW,YAAc,gB,YCDzCC,MApBf,SAAcZ,GACV,OACI,yBAAKC,UAAU,QACX,yBAAKA,UAAU,aACX,6BACI,wBAAIA,UAAU,qBAAqBD,EAAMa,UAE7C,yBAAKZ,UAAU,mBACX,0BAAMA,UAAU,uBAAuBa,QAASd,EAAMe,aAClD,uBAAGd,UAAU,iBAEjB,0BAAMA,UAAU,wBAAwBa,QAASd,EAAMgB,eACnD,uBAAGf,UAAU,0BCetBgB,MA1Bf,SAAcjB,GACV,OACI,yBAAKC,UAAU,QACX,6BACI,0CACCD,EAAMkB,MAAMC,KAAI,SAAAZ,GACb,OACI,kBAAC,EAAD,CACIa,IAAKb,EAAKc,GACVR,QAASN,EAAKM,QACdG,cAAe,kBAAMhB,EAAMgB,cAAcT,EAAKc,KAC9CN,YAAa,kBAAMf,EAAMe,YAAYR,EAAKc,UAItD,4BACIP,QAASd,EAAMsB,eACfrB,UAAU,eAFd,cC8CDsB,E,YA1DX,aAAe,IAAD,8BACV,+CAIJd,cAAgB,SAAAe,GACZ,EAAKC,SAAS,CAAElB,KAAMiB,EAAEE,OAAOpB,SANrB,EASdH,cAAgB,SAAAqB,GACZA,EAAEG,iBACF,EAAKF,SAAS,CACVJ,GAAIO,MACJV,MAAM,GAAD,mBAAM,EAAKW,MAAMX,OAAjB,CAAwB,CAAEG,GAAI,EAAKQ,MAAMR,GAAIR,QAAS,EAAKgB,MAAMtB,QACtEA,KAAM,GACNI,UAAU,KAfJ,EAkBdW,eAAiB,WACb,EAAKG,SAAS,CAAEP,MAAO,MAnBb,EAsBdF,cAAgB,SAAAK,GACZ,EAAKI,SAAS,CAAEP,MAAO,EAAKW,MAAMX,MAAMY,QAAO,SAAAvB,GAAI,OAAIA,EAAKc,KAAOA,QAvBzD,EA0BdN,YAAc,SAAAM,GACV,EAAKI,SAAS,CACVP,MAAO,EAAKW,MAAMX,MAAMY,QAAO,SAAAvB,GAAI,OAAIA,EAAKc,KAAOA,KACnDd,KAAM,EAAKsB,MAAMX,MAAMa,MAAK,SAAAxB,GAAI,OAAIA,EAAKc,KAAOA,KAAIR,QAASQ,GAAIA,EAAIV,UAAU,KA3BnF,EAAKkB,MAAQ,CAAER,GAAIO,MAAQV,MAAO,GAAIX,KAAM,GAAII,UAAU,GAFhD,E,sEAkCV,OACI,yBAAKV,UAAU,YACX,yBAAKA,UAAU,QACX,wBAAIA,UAAU,gBAAd,eAGA,kBAAC,EAAD,CACIM,KAAMyB,KAAKH,MAAMtB,KACjBE,cAAeuB,KAAKvB,cACpBN,cAAe6B,KAAK7B,cACpBQ,SAAUqB,KAAKH,MAAMlB,WAEzB,kBAAC,EAAD,CACIO,MAAOc,KAAKH,MAAMX,MAClBI,eAAgBU,KAAKV,eACrBN,cAAegB,KAAKhB,cACpBD,YAAaiB,KAAKjB,oB,GAnDnBkB,IAAMC,WCOdC,MARf,WACE,OACE,yBAAKlC,UAAU,OACb,kBAACmC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2b563797.chunk.js","sourcesContent":["import React from 'react';\nimport './input.scss';\n\nfunction Input(props) {\n    return (\n        <div className='input'>\n            <form onSubmit={props.submitHandler}>\n                <input\n                    type='text'\n                    placeholder='add to do task'\n                    value={props.task}\n                    className='input-box'\n                    onChange={props.changeHandler}\n                />\n                <div>\n                    <button\n                        type='submit'\n                        disabled={props.task ? false : true}\n                        className={\n                            props.editTask\n                                ? 'input-btn input-btn-edit'\n                                : 'input-btn input-btn-add'\n                        }\n                    >\n                        {props.editTask ? 'EDIT TASK' : 'ADD TASK'}\n                    </button>\n                </div>\n            </form>\n        </div>\n    );\n}\n\nexport default Input;","import React from 'react';\nimport './task.scss';\n\nfunction Task(props) {\n    return (\n        <div className='task'>\n            <div className='task-list'>\n                <div>\n                    <h3 className='task-list-heading'>{props.subject}</h3>\n                </div>\n                <div className='task-list-icons'>\n                    <span className='task-list-icons-edit' onClick={props.editHandler}>\n                        <i className='fas fa-edit' />\n                    </span>\n                    <span className='task-list-icons-trash' onClick={props.removeHandler}>\n                        <i className='fas fa-trash-alt' />\n                    </span>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Task;","import React from 'react';\nimport './list.scss';\nimport Task from '../Task/Task';\n\nfunction List(props) {\n    return (\n        <div className='list'>\n            <div>\n                <h2>To Do List</h2>\n                {props.tasks.map(task => {\n                    return (\n                        <Task\n                            key={task.id}\n                            subject={task.subject}\n                            removeHandler={() => props.removeHandler(task.id)}\n                            editHandler={() => props.editHandler(task.id)}\n                        />\n                    )\n                })}\n                <button\n                    onClick={props.refreshHandler}\n                    className='btn-refresh'\n                >\n                    REFRESH\n                </button>\n            </div>\n        </div>\n    );\n}\n\nexport default List;","import React from 'react';\nimport './main.scss';\nimport uuid from 'uuid';\nimport Input from '../Input/Input';\nimport List from '../List/List';\n\nclass ToDoMain extends React.Component {\n    constructor() {\n        super();\n        this.state = { id: uuid(), tasks: [], task: '', editTask: false };\n    }\n\n    changeHandler = e => {\n        this.setState({ task: e.target.value });\n    }\n\n    submitHandler = e => {\n        e.preventDefault();\n        this.setState({ \n            id: uuid(), \n            tasks: [...this.state.tasks, { id: this.state.id, subject: this.state.task }], \n            task: '', \n            editTask: false });\n    };\n\n    refreshHandler = () => {\n        this.setState({ tasks: [] });\n    };\n\n    removeHandler = id => {\n        this.setState({ tasks: this.state.tasks.filter(task => task.id !== id) });\n    };\n\n    editHandler = id => {\n        this.setState({ \n            tasks: this.state.tasks.filter(task => task.id !== id), \n            task: this.state.tasks.find(task => task.id === id).subject, id: id, editTask: true \n        });\n    };\n\n    render() {\n        return (\n            <div className='todomain'>\n                <div className='task'>\n                    <h2 className='task-heading'>\n                        To Do Input\n                    </h2>\n                    <Input\n                        task={this.state.task}\n                        changeHandler={this.changeHandler} \n                        submitHandler={this.submitHandler}\n                        editTask={this.state.editTask}\n                    />\n                    <List\n                        tasks={this.state.tasks}\n                        refreshHandler={this.refreshHandler}\n                        removeHandler={this.removeHandler}\n                        editHandler={this.editHandler}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ToDoMain;","import React from 'react';\nimport './App.scss';\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport Main from './components/Main/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}